#!/usr/bin/env sh
#
# xrootd/cmsd   This shell script takes care of starting and stopping
#               Qserv xrootd/cmsd instances.
# description: xrootd is the filesystem which allow Qserv master to \
# communicate with Qserv workers.\
# It is composed of two services : xrootd and cmsd

### BEGIN INIT INFO
# Provides: xrootd cmsd
# Short-Description: start and stop xrootd/cmsd
# Description: XRootD software framework is a fully generic suite for fast, \
#              low latency and scalable data access. It's the communication \
#              middleware used between Qserv master and nodes. \
### END INIT INFO

DIR=$(cd "$(dirname "$0")"; pwd -P)

# Source functions library.
. ${DIR}/qserv-functions

NAME="xrootd"
DAEMON=${NAME}

source_sysconfig ${DIR}

# Check variables which are not controlled by application
check_writable ${NAME} "QSERV_RUN_DIR"
check_writable ${NAME} "QSERV_PID_DIR"
check_writable ${NAME} "QSERV_LOG_DIR"
check_readable ${NAME} "XROOTD_DIR"

err_msg="Failure while starting ${NAME}:"
if [ -z "${NODE_TYPE}" ]; then
    log_failure_msg "${local_err_msg} \$NODE_TYPE is an empty string"
    exit 1
fi

XROOTD_CONFIG="${QSERV_RUN_DIR}/etc/lsp.cf"
# Add configuration for xrdssi, used only on Qserv workers, not Czar
XRDSSI_CONFIG="${QSERV_RUN_DIR}/etc/xrdssi.cnf"
XROOTD_INSTANCE_NAME="worker"

PID_DIR=${QSERV_PID_DIR}/${XROOTD_INSTANCE_NAME}
LOG_DIR=${QSERV_LOG_DIR}

# Log configuration file for worker nodes.
# xrootd manager doesn't use it.
# Indeed, log4cxx is only used by Qserv plugin
# which only runs on xrootd server side (i.e. worker nodes)
export LSST_LOG_CONFIG="${QSERV_RUN_DIR}/etc/log4cxx.worker.properties"

# method to guess pid file name,
# takes single argument - program name
pid_file_name() {
    local pidfile=${PID_DIR}/$1.pid
    test "${1}${NODE_TYPE}" = "cmsdmaster" && pidfile=${PID_DIR}/$1.mangr.pid
    echo $pidfile
}

start_service() {

    local prog

    prog=${1##*/}

    pidfile=$(pid_file_name $prog)
    lockfile=${QSERV_RUN_DIR}/var/lock/subsys/${prog}
    BINARY=${XROOTD_DIR}/bin/${prog}
    logfile=${LOG_DIR}/${prog}.log
    [ -x ${BINARY} ] || exit 5
    [ -f ${XROOTD_CONFIG} ] || exit 6

    console_logfile="${LOG_DIR}/xrootd-console.log"
    cmd="${BINARY} -c ${XROOTD_CONFIG} -l ${logfile} -n ${XROOTD_INSTANCE_NAME} -I v4  -+xrdssi ${XRDSSI_CONFIG} >>${console_logfile} 2>&1 &"
    start -p ${pidfile} -l ${lockfile} ${prog} "${cmd}"
    ret=$?
    # xrootd modifies log file path, try to guess it here too for logging
    # purpose
    real_logfile=${LOG_DIR}/${XROOTD_INSTANCE_NAME}/${prog}.log
    [ $ret -eq 0 ] || echo "See startup logfiles : ${console_logfile}, ${real_logfile}"
    return $ret
}

stop_service() {

    local prog

    prog=${1##*/}

    pidfile=$(pid_file_name $prog)
    lockfile=${QSERV_RUN_DIR}/var/lock/subsys/${prog}

    stop -p $pidfile -l $lockfile $prog
}

start_all() {
    local xrootd_started cmsd_started=0 retval=1
    mkdir -p ${PID_DIR} || {
        log_failure_msg "Failed to create ${PID_DIR}"
        return 1
    }

    start_service "xrootd"
    xrootd_started=$?

    if [ ${NODE_TYPE} != "mono" ]; then
        start_service "cmsd"
        cmsd_started=$?
    fi

    test $xrootd_started -eq 0 -a $cmsd_started -eq 0
}

stop_all() {
    local xrootd_stopped cmsd_stopped=0 retval=1

    stop_service "xrootd"
    xrootd_stopped=$?

    if [ ${NODE_TYPE} != "mono" ]; then
        stop_service "cmsd"
        cmsd_stopped=$?
    fi

    test $xrootd_stopped -eq 0 -a $cmsd_stopped -eq 0
}

status_all () {
    local xrootd_status cmsd_status=0 retval=1

    NAME="xrootd"
    DAEMON=${XROOTD_DIR}/bin/${NAME}
    pidfile=$(pid_file_name $NAME)
    status_of_proc -p $pidfile "$DAEMON" "$NAME"
    xrootd_status=$?

    if [ ${NODE_TYPE} != "mono" ]; then
        NAME="cmsd"
        DAEMON=${XROOTD_DIR}/bin/${NAME}
        pidfile=$(pid_file_name $NAME)
        status_of_proc -p $pidfile "$DAEMON" "$NAME"
        cmsd_status=$?
    fi

    test $xrootd_status -eq 0 -a $cmsd_status -eq 0
}



# See how we were called.
case "$1" in
    start)
        start_all
        ;;
    stop)
        stop_all
        ;;
    status)
        status_all
        ;;
    restart)
        stop_all
        start_all
        ;;
    try-restart|condrestart)
        if status_all > /dev/null; then
            stop_all
            start_all
        fi
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|try-restart}"
        exit 2
esac
